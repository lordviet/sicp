#lang racket

; Ackermannâ€™s function
(define (A x y)
  (cond ((= y 0) 0)
        ((= x 0) (* 2 y))
        ((= y 1) 2)
        (else (A (- x 1) (A x (- y 1))))))

(A 1 10)

; Basically that's what this procedure generates

; (A (- 1 1) (A 1 9))
; (A (- 1 1) (A (- 1 1) (A 1 8)))
; (A (- 1 1) (A (- 1 1) (A (- 1 1) (A 1 7))))
; (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A 1 6)))))
; (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A 1 5))))))
; (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A 1 4))))))
; (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A 1 3)))))))
; (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A 1 2)))))))))
; (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A 1 1))))))))))
; (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) 2)))))))))
; (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A 0 2)))))))))
; (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A 0 4))))))))
; (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A 0 8)))))))
; (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A 0 16))))))
; (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (- 1 1) (A 0 32)))))
; (A (- 1 1) (A (- 1 1) (A (- 1 1) (A (0 64)))))
; (A (- 1 1) (A (- 1 1) (A 0 128)))
; (A (- 1 1) (A 0 256))
; (A 0 512)
; 1024

(A 2 4)
; (A (- 2 1) (A 2 3))
; (A (- 2 1) (A (- 2 1) (A 2 2)))
; (A (- 2 1) (A (- 2 1) (A (- 2 1) (A 2 1))))
; (A (- 2 1) (A (- 2 1) (A (- 2 1) 2)))
; (A (- 2 1) (A (- 2 1) (A 1 2)))
; (A (- 2 1) (A (- 2 1) (A (- 1 1) (A 1 1))))
; (A (- 2 1) (A (- 2 1) (A 0 2)))
; (A (- 2 1) (A 1 4))
; (A 1 16)
; 65536

(A 3 3)

(define (f n) (A 0 n)) ; n => 2 * n
(f 20) ; Value: 40

(define (g n) (A 1 n)) ; n => 2^n
(g 5) ; Value: 32

(define (h n) (A 2 n)) ; n => 2^h(n - 1)
(h 3) ; Value 16
; For example (h 3) would be 2 ^ 2 ^ 2, it's called tetration, it's a repeated exponentiation